{
  "32": "public String plusOut(String str, String word)\r\n{\r\n    String newString = \"\";\r\n    int n = str.length();\r\n    int w = word.length();\r\n\tint i = 0;\r\n\twhile(i < n)\r\n    {\r\n\t\tif (str.substring(i).startsWith(word))\r\n        {\r\n\t\t\tnewString = newString + word;\r\n\t\t\ti = i + w;\r\n\t\t}\r\n\t\telse \r\n        {\r\n\t\t\tnewString = newString + \"+\";\r\n\t\t\ti = i + 1;\r\n\t\t}\r\n\t}\r\n\treturn newString;\r\n}\r\n",
  "37": "public boolean endOther(String a, String b)\r\n{\r\n      if(a.length() < b.length()) {\r\n        String temp = a;\r\n        a = b.toLowerCase();\r\n        b = temp.toLowerCase();\r\n    }\r\n                  \r\n    return a.substring(a.length() - b.length()).equals(b);\r\n}\r\n",
  "36": "public int countCode(String str)\r\n{\r\n    int n = str.length();\r\n    int k = 0;\r\n    for (int i = 0; i < n-3; i ++)\r\n    {\r\n    \tif (str.substring(i, i + 2).equals(\"co\") && \r\n            str.charAt(i+3) == 'e')\r\n        {\r\n            k = k + 1;\r\n        }    \r\n    }\r\n    return k;\r\n}\r\n",
  "128": "public boolean bobThere(String str)\r\n{\r\n    int len = str.length();\r\n\r\n  for (int i = 0; i < len - 2; i++) {\r\n    if (str.charAt(i) == 'b' && str.charAt(i+2) == 'b')\r\n    return true;\r\n  }\r\n  return false;\r\n\r\n}\r\n",
  "31": "public String repeatEnd(String str, int n)\r\n{\r\n    int w = str.length();\r\n    String finalString = \"\";\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        finalString = finalString + str.substring(w - n, w);\r\n    }\r\n    return finalString;\r\n}\r\n",
  "38": "public boolean xyzThere(String str)\r\n{\r\n     if(str.length() >= 3 && str.substring(0, 3).equals(\"xyz\"))\r\n        return true;\r\n          \r\n    for(int i = 1; i < str.length() - 2; i++) {\r\n        if(str.charAt(i - 1) != '.' && str.substring(i, i + 3).equals(\"xyz\"))\r\n            return true;\r\n    }\r\n                          \r\n    return false;\r\n}\r\n",
  "40": "public String getSandwich(String str)\r\n{\r\n     int first = str.indexOf(\"bread\");\r\n    int last = str.lastIndexOf(\"bread\");\r\n    if (first == last) return \"\";\r\n    return str.substring(first+5, last);\r\n}\r\n",
  "34": "public String zipZap(String str)\r\n{\r\n    String newString = \"\";\r\n    int n = str.length();\r\n    if (n < 3)\r\n    {\r\n        return str;\r\n    }\r\n    for (int i = 0; i < n ; i++)\r\n    {\r\n        if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')\r\n        {\r\n            newString = newString + \"zp\";\r\n            i = i + 2;\r\n        }\r\n        else \r\n        {\r\n            newString = newString + str.charAt(i);\r\n        }\r\n    }\r\n    return newString;\r\n}",
  "33": "public String mixString(String a, String b)\r\n{\r\n    int lengthB = b.length();\r\n    int lengthA = a.length();\r\n    String newString = \"\";\r\n    if (lengthB == lengthA)\r\n    {\r\n        for (int i = 0; i < lengthB; i++)\r\n        {\r\n            newString = newString + a.charAt(i) + b.charAt(i);\r\n        }\r\n    }\r\n    else if (lengthB > lengthA)\r\n    {\r\n        for (int i = 0; i < lengthA; i++)\r\n        {\r\n            newString = newString + a.charAt(i) + b.charAt(i);\r\n        }\r\n        newString = newString + b.substring(lengthA, lengthB);\r\n    }\r\n    else \r\n    {\r\n        for (int i = 0; i < lengthB; i++)\r\n        {\r\n            newString = newString + a.charAt(i) + b.charAt(i);\r\n        }\r\n        newString = newString + a.substring(lengthB, lengthA);\r\n    }\r\n    return newString;\r\n}\r\n",
  "39": "public boolean xyBalance(String str)\r\n{\r\n    int n = str.length();\r\n    if (!str.contains(\"x\"))\r\n    {\r\n        return true;\r\n    }\r\n    else if (str.endsWith(\"x\"))\r\n    {\r\n        return false;     \r\n    }\r\n    else \r\n    {\r\n    \tfor (int i = 0; i < n ; i++)\r\n    \t{\r\n        \tif (str.charAt(i) == 'x' && str.substring(i+1,\r\n            \tn).contains(\"y\"))\r\n        \t{\r\n            \treturn true;\r\n        \t}\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"
}

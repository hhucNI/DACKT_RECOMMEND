{"494": {"106": "Develop a function 'sameEnds' that checks if the first 'n' elements in an array 'nums' are the same as the last 'n' elements.", "43": "Create a function 'frontPiece' that returns the first two elements of an integer array 'nums'. If 'nums' has less than two elements, return the whole array.", "41": "Write a function 'sum3' that computes the sum of the first three elements in an integer array 'nums'.", "104": "Develop a function 'zeroMax' that replaces every '0' in an integer array 'nums' with the largest odd number to the right of that '0'.", "67": "Create a function 'has77' that returns 'true' if the integer array 'nums' contains either '7 7' or '7 _ 7' pattern.", "107": "Write a function 'countClumps' that counts the number of 'clumps' in an integer array 'nums', where a 'clump' is a series of two or more adjacent elements of the same value.", "108": "Develop a function 'fix45' that rearranges an integer array 'nums' so that every '4' is followed by a '5'.", "49": "Create a function 'sum13' that calculates the sum of the numbers in an integer array 'nums', ignoring elements immediately following a '13'.", "44": "Write a function 'countEvens' that counts the number of even integers in an integer array 'nums'.", "46": "Develop a function 'isEverywhere' that checks if a specific value 'val' is everywhere in an integer array 'nums'."}, "492": {"32": "public String plusOut(String str, String word)\r\n{\r\n    String newString = \"\";\r\n    int n = str.length();\r\n    int w = word.length();\r\n\tint i = 0;\r\n\twhile(i < n)\r\n    {\r\n\t\tif (str.substring(i).startsWith(word))\r\n        {\r\n\t\t\tnewString = newString + word;\r\n\t\t\ti = i + w;\r\n\t\t}\r\n\t\telse \r\n        {\r\n\t\t\tnewString = newString + \"+\";\r\n\t\t\ti = i + 1;\r\n\t\t}\r\n\t}\r\n\treturn newString;\r\n}\r\n", "37": "public boolean endOther(String a, String b)\r\n{\r\n      if(a.length() < b.length()) {\r\n        String temp = a;\r\n        a = b.toLowerCase();\r\n        b = temp.toLowerCase();\r\n    }\r\n                  \r\n    return a.substring(a.length() - b.length()).equals(b);\r\n}\r\n", "36": "public int countCode(String str)\r\n{\r\n    int n = str.length();\r\n    int k = 0;\r\n    for (int i = 0; i < n-3; i ++)\r\n    {\r\n    \tif (str.substring(i, i + 2).equals(\"co\") && \r\n            str.charAt(i+3) == 'e')\r\n        {\r\n            k = k + 1;\r\n        }    \r\n    }\r\n    return k;\r\n}\r\n", "128": "public boolean bobThere(String str)\r\n{\r\n    int len = str.length();\r\n\r\n  for (int i = 0; i < len - 2; i++) {\r\n    if (str.charAt(i) == 'b' && str.charAt(i+2) == 'b')\r\n    return true;\r\n  }\r\n  return false;\r\n\r\n}\r\n", "31": "public String repeatEnd(String str, int n)\r\n{\r\n    int w = str.length();\r\n    String finalString = \"\";\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        finalString = finalString + str.substring(w - n, w);\r\n    }\r\n    return finalString;\r\n}\r\n", "38": "public boolean xyzThere(String str)\r\n{\r\n     if(str.length() >= 3 && str.substring(0, 3).equals(\"xyz\"))\r\n        return true;\r\n          \r\n    for(int i = 1; i < str.length() - 2; i++) {\r\n        if(str.charAt(i - 1) != '.' && str.substring(i, i + 3).equals(\"xyz\"))\r\n            return true;\r\n    }\r\n                          \r\n    return false;\r\n}\r\n", "40": "public String getSandwich(String str)\r\n{\r\n     int first = str.indexOf(\"bread\");\r\n    int last = str.lastIndexOf(\"bread\");\r\n    if (first == last) return \"\";\r\n    return str.substring(first+5, last);\r\n}\r\n", "34": "public String zipZap(String str)\r\n{\r\n    String newString = \"\";\r\n    int n = str.length();\r\n    if (n < 3)\r\n    {\r\n        return str;\r\n    }\r\n    for (int i = 0; i < n ; i++)\r\n    {\r\n        if (str.charAt(i) == 'z' && str.charAt(i+2) == 'p')\r\n        {\r\n            newString = newString + \"zp\";\r\n            i = i + 2;\r\n        }\r\n        else \r\n        {\r\n            newString = newString + str.charAt(i);\r\n        }\r\n    }\r\n    return newString;\r\n}", "33": "public String mixString(String a, String b)\r\n{\r\n    int lengthB = b.length();\r\n    int lengthA = a.length();\r\n    String newString = \"\";\r\n    if (lengthB == lengthA)\r\n    {\r\n        for (int i = 0; i < lengthB; i++)\r\n        {\r\n            newString = newString + a.charAt(i) + b.charAt(i);\r\n        }\r\n    }\r\n    else if (lengthB > lengthA)\r\n    {\r\n        for (int i = 0; i < lengthA; i++)\r\n        {\r\n            newString = newString + a.charAt(i) + b.charAt(i);\r\n        }\r\n        newString = newString + b.substring(lengthA, lengthB);\r\n    }\r\n    else \r\n    {\r\n        for (int i = 0; i < lengthB; i++)\r\n        {\r\n            newString = newString + a.charAt(i) + b.charAt(i);\r\n        }\r\n        newString = newString + a.substring(lengthB, lengthA);\r\n    }\r\n    return newString;\r\n}\r\n", "39": "public boolean xyBalance(String str)\r\n{\r\n    int n = str.length();\r\n    if (!str.contains(\"x\"))\r\n    {\r\n        return true;\r\n    }\r\n    else if (str.endsWith(\"x\"))\r\n    {\r\n        return false;     \r\n    }\r\n    else \r\n    {\r\n    \tfor (int i = 0; i < n ; i++)\r\n    \t{\r\n        \tif (str.charAt(i) == 'x' && str.substring(i+1,\r\n            \tn).contains(\"y\"))\r\n        \t{\r\n            \treturn true;\r\n        \t}\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}, "487": {"25": "Given three integers (a, b, c), check if they are evenly spaced. Numbers are considered evenly spaced if the difference between the smallest and middle number equals the difference between the middle and largest number.", "21": "Create a function that computes the sum of three integers (a, b, c), but if any of the numbers is 13, it gets replaced by 0, and then calculate the sum.", "102": "Write a function that manipulates a given string (str). If the string's length is 2, remove the first and last characters if they are the same. If the length is less than 2, return the original string. If the first and last characters differ, return the original string.", "24": "Implement a function that takes two integers (a, b) as parameters and returns the integer closest to 21 without exceeding it. If both integers exceed 21, return 0.", "100": "Develop a function that rounds three given integers (a, b, c) to the nearest multiple of 10 and then sums them up.", "28": "Create a function that processes a given string (str). If the string is empty, return '@@'. If the string's length is 1, append '@' to it. For strings longer than 1, return the first two characters of the string.", "101": "Write a function to determine the remaining number needed to make chocolate bars of a specified goal using small and big bars. Given the goal and counts of small (1 unit) and big (5 units) bars, return the remaining number required. If the goal is already met, return 0. If it cannot be met, return -1.", "22": "Develop a function to calculate the sum of three integers (a, b, c), but if any number is in the 'teen' range (13-19, excluding 15 and 16), replace it with 0 before calculating the sum.", "17": "Create a function that assigns a prize based on three integers (a, b, c). If all three integers are the same, return 10 (unless they are all 2, in which case return 5). If all three integers are different, return 1. For any other combination, return 0.", "20": "Write a function to calculate the sum of three integers (a, b, c), but if any two integers are the same, replace that value with 0 before calculating the sum."}, "502": {"56": "Develop a function 'centeredAverage' that calculates the average of an array 'nums', excluding the largest and smallest values.", "64": "Create a function 'fizzBuzz' that returns an array of strings representing the numbers from 'start' to 'end', but for multiples of 3, 'Fizz' is returned, for multiples of 5, 'Buzz' is returned, and for multiples of both 3 and 5, 'FizzBuzz' is returned.", "45": "Write a function 'sum67' that calculates the sum of the numbers in an integer array 'nums', except that numbers between '6' and '7' inclusive are ignored.", "51": "Develop a function 'tenRun' that replaces each element in the array 'nums' that is a multiple of 10 with the next non-multiple of 10 value in the array.", "48": "Create a function 'withoutTen' that returns a version of the given array 'nums' where all the '10's have been removed and the remaining elements are shifted left to fill the emptied positions.", "118": "Write a function 'shiftLeft' that shifts all elements in the array 'nums' one position to the left and moves the first element to the last position.", "57": "Develop a function 'fizzArray' that generates an array containing the numbers from '0' to 'n - 1'.", "71": "Create a function 'canBalance' that returns 'true' if there is a point in the array 'nums' where the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "112": "Write a function 'seriesUp' that generates a sequence of numbers from '1' up to 'n' arranged in increasing order.", "70": "Develop a function 'twoTwo' that returns 'true' if every '2' in the array 'nums' has another '2' somewhere later in the array."}, "439": {"1": "Description: Write a Java function called sortaSum that takes two integer parameters a and b and returns a modified sum based on the following rules:\n\nCalculate the sum of a and b.\nIf the sum is between 10 and 19 (inclusive), return 20.\nOtherwise, return the actual sum.", "3": "Description: Write a Java function called in1To10 that takes two parameters: an integer n and a boolean outsideMode. The function should return true if the following conditions are met:\n\nIf outsideMode is true, then n should be less than or equal to 1 or greater than or equal to 10 to return true.\nIf outsideMode is false, then n should be between 1 and 10 (inclusive) to return true.", "5": "Description: Write a Java function called answerCell that takes three boolean parameters: isMorning, isMom, and isAsleep. The function should determine whether to answer a phone call based on the following conditions:\n\nIf isAsleep is true, return false.\nIf isMom is true or isMorning is false, return true.\nOtherwise, return false.", "12": "Description: Write a Java function called squirrelPlay that takes two parameters: an integer temp representing the current temperature in Fahrenheit and a boolean isSummer indicating whether it's summer. The function should determine whether it's a good time for squirrels to play outside based on the following rules:\n\nIn summer (isSummer is true), squirrels will play if the temperature is between 60 and 100 degrees Fahrenheit (inclusive).\nIn non-summer (isSummer is false), squirrels will play if the temperature is between 60 and 90 degrees Fahrenheit (inclusive).", "13": "Description: Write a Java function called caughtSpeeding that takes two parameters: an integer speed representing the driver's speed, and a boolean isBirthday indicating whether it's the driver's birthday. The function should determine the penalty for speeding based on the following rules:\n\nIf it's not the driver's birthday (isBirthday is false):\n\nIf the driver's speed is 60 mph or less, return 0 (no ticket).\nIf the driver's speed is between 61 and 80 mph (inclusive), return 1 (small ticket).\nIf the driver's speed is 81 mph or more, return 2 (big ticket).\nIf it's the driver's birthday (isBirthday is true):\n\nThe speed limits are increased by 5 mph, so:\nIf the driver's speed is 65 mph or less, return 0 (no ticket).\nIf the driver's speed is between 66 and 85 mph (inclusive), return 1 (small ticket).\nIf the driver's speed is 86 mph or more, return 2 (big ticket).", "232": "Description: Write a Java function called alarmClock that takes two parameters: an integer day representing the day of the week (0 for Sunday through 6 for Saturday) and a boolean vacation indicating whether you are on vacation. The function should recommend when to set the alarm based on the following rules:\n\nIf you are on vacation (vacation is true):\n\nIf it's a weekend (Saturday or Sunday), return \"off.\"\nOtherwise, return \"10:00.\"\nIf you are not on vacation (vacation is false):\n\nIf it's a weekend (Saturday or Sunday), return \"10:00.\"\nOtherwise, return \"7:00.\"", "233": "Description: Write a Java function called love6 that takes two integer parameters, a and b, and checks whether one of the following conditions is true:\n\nEither a or b is equal to 6.\nThe sum of a and b is equal to 6.\nThe absolute difference between a and b is equal to 6.\nIf any of these conditions is met, the function should return true; otherwise, it should return false.", "234": "Description: Write a Java function called cigarParty that takes two parameters: an integer cigars representing the number of cigars, and a boolean isWeekend indicating whether it's the weekend. The function should determine whether you should attend a cigar party based on the following rules:\n\nIf it's the weekend (isWeekend is true), you can attend the party if you have 40 or more cigars.\nIf it's not the weekend (isWeekend is false), you can attend the party if you have between 40 and 60 cigars (inclusive).\nThe function should return true if you should attend the party and false otherwise.", "235": "Description: Write a Java function called cigarParty that takes two parameters: an integer cigars representing the number of cigars, and a boolean isWeekend indicating whether it's the weekend. The function should determine whether you should attend a cigar party based on the following rules:\n\nIf it's the weekend (isWeekend is true), you can attend the party if you have 40 or more cigars.\nIf it's not the weekend (isWeekend is false), you can attend the party if you have between 40 and 60 cigars (inclusive).\nThe function should return true if you should attend the party and false otherwise.", "236": "Description: Write a Java function called greenTicket that takes three integer parameters, a, b, and c, representing the values on three green tickets. The function should determine the reward based on the following rules:\n\nIf all three ticket values are the same, return 20.\nIf two of the ticket values are the same (regardless of their positions), return 10.\nIf none of the above conditions are met (i.e., all ticket values are different), return 0."}}